{"version":3,"sources":["AddRecord/addRecord.js","ViewRecords/viewRecords.js","Utils/utilityFunctions.js","Home/home.js","Notifications/notifications.js","ErrorBoundary/errorboundary.js","PageNotFound/pagenotfound.js","Routes/routes.js","App/app.js","serviceWorker.js","index.js"],"names":["AddRecord","props","handleInputChange","e","persist","setState","target","name","value","addRecord","preventDefault","firebase","collection","add","custName","state","custPhone","number","plantInstalled","model","dateOfInstallment","dateofinstallment","nextServiceDate","nextservicedate","custAddress","address","then","docRef","alert","catch","error","console","Fragment","type","placeholder","onChange","this","onClick","to","Component","ViewRecords","records","recordsPresent","db","recArr","get","querySnapshot","forEach","doc","push","data","recordMapper","map","item","index","key","feed","id","getToday","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","Home","count","getNotificationCount","where","length","playNotificationSound","audioRef","current","play","React","createRef","href","webkit-playsinline","playsInline","ref","src","Notification","getData","feed2","ErrorBoundary","hasError","errorInfo","log","className","children","PageNotFound","Routes","exact","path","render","App","Boolean","window","location","hostname","match","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.11b9d5cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import firebase from 'firebase/app';\r\nimport * as firebase from 'firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AddRecord extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        e.persist();\r\n        this.setState(\r\n            ()=> { return { [e.target.name] : e.target.value }}\r\n        );\r\n    }\r\n    \r\n    addRecord = e => {\r\n        e.preventDefault();\r\n        var db = firebase.firestore();\r\n        db.collection(\"installations\").add({\r\n            custName: this.state.name,\r\n            custPhone: this.state.number,\r\n            plantInstalled: this.state.model,\r\n            dateOfInstallment: this.state.dateofinstallment,\r\n            nextServiceDate: this.state.nextservicedate,\r\n            custAddress: this.state.address\r\n        })\r\n        .then(function(docRef) {\r\n            alert(\"Record Added Successfully!\");\r\n        })\r\n        .catch(function(error) {\r\n            console.error(\"Error Adding Document: \", error);\r\n        });\r\n    }\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <input type=\"text\" placeholder=\"Customer Name\" onChange={this.handleInputChange} name=\"name\" />\r\n                <input type=\"number\" placeholder=\"Customer Phone Number\"  onChange={this.handleInputChange} name=\"number\" />\r\n                <input type=\"text\"  placeholder=\"Plant Model\" onChange={this.handleInputChange} name=\"model\" />\r\n                <input type=\"date\" placeholder=\"Date of Installment\" onChange={this.handleInputChange} name=\"dateofinstallment\" />\r\n                <input type=\"date\" placeholder=\"Next Service Date\" onChange={this.handleInputChange} name=\"nextservicedate\" />\r\n                <input type=\"text\" placeholder=\"Address\" onChange={this.handleInputChange} name=\"address\" />\r\n                <button type=\"button\" onClick={this.addRecord}> Add New Record</button>\r\n                <p>\r\n                <Link to=\"/dashboard\">Go to Dashboard</Link>\r\n                </p>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AddRecord;","import React, { Component, Fragment } from 'react';\r\nimport * as firebase from 'firebase';\r\nimport './viewRecords.css';\r\nimport { Link } from 'react-router-dom';\r\nclass ViewRecords extends Component {\r\n\r\n    state ={\r\n        records: [],\r\n        recordsPresent: false\r\n    }\r\n    \r\n    componentDidMount()\r\n    {\r\n        var db = firebase.firestore();\r\n        var recArr =[];\r\n        db.collection(\"installations\").get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                recArr.push(doc.data());\r\n                this.setState(\r\n                    ()=> { return { records: recArr, recordsPresent: true}},\r\n                    ()=> { }\r\n                )\r\n            });\r\n        });\r\n    }\r\n    render() { \r\n        const recordMapper = this.state.records.map(\r\n            (item, index)=> <tr key={index}><td>{item.custName}</td><td>{item.plantInstalled}</td><td>{item.dateOfInstallment}</td><td>{item.nextServiceDate}</td><td>{item.custAddress}</td><td>{item.custPhone}</td></tr> \r\n        );\r\n        const feed = this.state.recordsPresent === true ? recordMapper : <tr><td>Loading</td></tr>\r\n        return ( \r\n            <Fragment>\r\n                <p>Our Clients:</p>\r\n                <table id=\"records-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td>Name</td>\r\n                            <td>Plant Installed</td>\r\n                            <td>Date of Installment</td>\r\n                            <td>Next Service Date</td>\r\n                            <td>Address</td>\r\n                            <td>Phone</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {feed}\r\n                    </tbody>\r\n                </table>\r\n                <p>\r\n                <Link to=\"/dashboard\">Go to Dashboard</Link>\r\n                </p>\r\n            </Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ViewRecords;","//Get Today's Date\r\nexport const getToday = () => {\r\n    var today = new Date();\r\n    var dd = today.getDate();\r\n    var mm = today.getMonth() + 1; //January is 0!\r\n    var yyyy = today.getFullYear();\r\n    if (dd < 10) {\r\n        dd = \"0\" + dd; //If Date is between 1-9 - Prefix '0' to it\r\n    }\r\n    if (mm < 10) {\r\n        mm = \"0\" + mm; //If Month is between 1-9 - Prefix '0' to it\r\n    }\r\n    today = yyyy + \"-\" + mm + \"-\" + dd;\r\n    return today;\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as firebase from 'firebase';\r\nimport { getToday } from '../Utils/utilityFunctions';\r\n\r\nclass Home extends Component {\r\n    state = { \r\n        count: 0\r\n    }\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.audioRef = React.createRef();\r\n    }\r\n    // componentDidMount()\r\n    // {\r\n    //     this.getNotificationCount();\r\n    // }\r\n\r\n   \r\n    getNotificationCount = () => {\r\n       var today = getToday();\r\n        var db = firebase.firestore();\r\n        var recArr =[];\r\n        db.collection(\"installations\").where(\"nextServiceDate\", \"==\", today).get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                recArr.push(doc.data());\r\n                this.setState(\r\n                    ()=> { return {count: recArr.length}},\r\n                    ()=> { this.playNotificationSound(recArr.length)}\r\n                );\r\n            });\r\n        });\r\n        // this.playNotificationSound();\r\n    }\r\n\r\n    playNotificationSound = (count) => {\r\n        if(count > 0)\r\n        {\r\n            this.audioRef.current.play();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                Welcome to Naveen's DB\r\n                <p>\r\n                    <Link to=\"/addrecords\">Add Records</Link> &nbsp;\r\n                    <Link to=\"/viewrecords\">View Records</Link> &nbsp;\r\n                    <Link to=\"/notifications\">Notifications ({this.state.count})</Link>  &nbsp;\r\n                    <a href=\"##\" onClick={this.getNotificationCount}>Refresh</a>\r\n                </p>\r\n                <audio  webkit-playsinline=\"true\" playsInline={true}  ref={this.audioRef} id=\"notificationSound\" src=\"https://notificationsounds.com/soundfiles/b2f627fff19fda463cb386442eac2b3d/file-sounds-1142-inflicted.mp3\" />\r\n            </Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\r\nimport * as firebase from 'firebase';\r\nimport { Link } from 'react-router-dom';\r\nimport { getToday } from '../Utils/utilityFunctions';\r\n\r\nclass Notification extends Component {\r\n    state = { \r\n        recordsPresent: false,\r\n        records: []\r\n     }\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n    componentDidMount()\r\n    {\r\n        this.getData();\r\n    }\r\n\r\n    getData = () => {\r\n        var today = getToday();\r\n        var db = firebase.firestore();\r\n        var recArr =[];\r\n        db.collection(\"installations\").where(\"nextServiceDate\", \"==\", today).get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                recArr.push(doc.data());\r\n            });\r\n            this.setState(\r\n                ()=> { return { records: recArr, recordsPresent: true, count: recArr.length}},\r\n                ()=> {  }\r\n            )\r\n        });\r\n    }\r\n    render() { \r\n        const recordMapper = this.state.records.map(\r\n            (item, index)=> <tr key={index}><td>{item.custName}</td><td>{item.plantInstalled}</td><td>{item.dateOfInstallment}</td><td>{item.nextServiceDate}</td><td>{item.custAddress}</td><td>{item.custPhone}</td></tr> \r\n        );\r\n        const feed = this.state.recordsPresent === true  ? recordMapper : <tr><td>Loading</td></tr>\r\n        const feed2 = this.state.count === 0 ? <tr><td>No Notification</td></tr>: feed;\r\n\r\n        return ( \r\n            <React.Fragment>\r\n                <p>Notifications ({this.state.count})</p>\r\n                <table id=\"records-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td>Name</td>\r\n                            <td>Plant Installed</td>\r\n                            <td>Date of Installment</td>\r\n                            <td>Next Service Date</td>\r\n                            <td>Address</td>\r\n                            <td>Phone</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {feed2}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <p>\r\n                <Link to=\"/dashboard\">Go to Dashboard</Link>\r\n                </p>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n\r\nexport default Notification;","import React, { Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    constructor(props) \r\n    {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n    \r\n    static getDerivedStateFromError(error) {\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, errorInfo) {\r\n      console.log(error, errorInfo);\r\n    }\r\n    \r\n    render() {\r\n      if (this.state.hasError) \r\n      {\r\n        return (\r\n            <div className=\"error-block\">\r\n                <p>\r\n                    <span>Something went wrong. </span>\r\n                    <Link to=\"/\">Go To Dashboard</Link> \r\n                </p>\r\n            </div>\r\n        );\r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n\r\n  export default ErrorBoundary;","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PageNotFound(props)\r\n{\r\n    return(\r\n        <Fragment>\r\n            <div className=\"pagenotfound\">\r\n                <h1> 404 Error. Page Not Found </h1>\r\n                <Link className=\"link\" to={'/dashboard'}>Click Here to go to Dashboard</Link>\r\n            </div>\r\n\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default PageNotFound;","import React, { Fragment, useState} from 'react';\r\nimport {BrowserRouter, Route, Redirect,Switch } from 'react-router-dom';\r\nimport AddRecord from '../AddRecord/addRecord';\r\nimport ViewRecords from '../ViewRecords/viewRecords';\r\nimport Home from '../Home/home';\r\nimport Notifications from '../Notifications/notifications';\r\nimport ErrorBoundary from '../ErrorBoundary/errorboundary';\r\nimport PageNotFound from '../PageNotFound/pagenotfound';\r\n\r\nconst Routes = () => {\r\n   \r\n    return ( \r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\" render={ ()=> <Redirect to=\"/dashboard\" />} />\r\n                <Route exact path=\"/dashboard\" render={ ()=> <Home />} />\r\n                <Route exact path=\"/addrecords\" render={ ()=> <AddRecord />} />\r\n                <Route exact path=\"/notifications\" render={ ()=> <Notifications />} />\r\n                <Route exact path=\"/viewrecords\" render={ ()=> <ViewRecords />} />  \r\n                <Route\r\n                      render={\r\n                        () =>\r\n                          <Fragment>\r\n                            <ErrorBoundary>\r\n                              <PageNotFound />\r\n                            </ErrorBoundary>\r\n                          </Fragment>\r\n                      }\r\n                    />\r\n            </Switch>\r\n        </BrowserRouter>\r\n     );\r\n}\r\n \r\nexport default Routes;","import React, { Component } from 'react';\r\nimport AddRecord from '../AddRecord/addRecord';\r\nimport Routes from '../Routes/routes';\r\n\r\nclass App extends Component {\r\n    state = {  }\r\n\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n            <Routes/>\r\n        </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/App/app';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyCmGN1TXfG9dTYXx80HvckdQkJpE9nTLXY\",\n  authDomain: \"naveen-s-db.firebaseapp.com\",\n  databaseURL: \"https://naveen-s-db.firebaseio.com\",\n  projectId: \"naveen-s-db\",\n  storageBucket: \"naveen-s-db.appspot.com\",\n  messagingSenderId: \"941064666107\",\n  appId: \"1:941064666107:web:17532e787616deadbf695e\",\n  measurementId: \"G-34S1Z2T39Q\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}